# Variable files for VMWare-ISO Builds - 03/24/21
#
# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.
#
# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.
#
# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
##############################################################################################
variable "winrm_username" {
    type          = string
    description   = "default winrm username used by packer to log into windows image"
}

variable "winrm_password" {
    type          = string
    description   = "default winrm username used by packer to log into windows image"
    sensitive     = true
}

variable "ssh_username" {
    type          = string
    description   = "default ssh username used by packer to log into linux image"
}

variable "ssh_password" {
    type          = string
    description   = "default ssh password used by packer to log into linux image"
    sensitive     = true
}

variable "vcenter_server" {
    type          = string
    description   = "HomeLab vCenter Server"
}

variable "datacenter" {
    type          = string
    description   = "HomeLab vCenter Server Datacenter"
}

variable "cluster" {
    type          = string
    description   = "HomeLab vCenter Server Cluster"
}

variable "host" {
    type          = string
    description   = "HomeLab vCenter Server Host to build images"
}

variable "datastore" {
    type          = string
    description   = "HomeLab vCenter Server vSAN Datastore to build images"
}

variable "folder" {
    type          = string
    description   = "HomeLab vCenter Server target folder for image"
}

variable "vcenter_username" {
    type          = string
    sensitive     = true
    description   = "HomeLab vCenter Server Username"
}

variable "vcenter_password" {
    type          = string
    sensitive     = true
    description   = "HomeLab vCenter Server Password"
}

# source blocks are analogous to the "builders" in json templates. They are used
# in build blocks. A build block runs provisioners and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "vsphere-iso" "opensuse-15-1" {
  ############ VM Config ############
  CPUs                 = 1
  RAM                  = 1024
  RAM_reserve_all      = true
  disk_controller_type = ["pvscsi"]
  storage {
    disk_size             = 20000
    disk_thin_provisioned = true
  }
  network_adapters {
    network      = "VM Network"
    network_card = "vmxnet3"
  }
  guest_os_type        = "sles15_64Guest"
  insecure_connection  = true

  ############ Boot Config ############
  boot_wait            = "10s"
  http_directory       = "http/opensuse"
#  output_directory     = "output/"
  boot_command         = [
                           "<esc><enter><wait>",
                           "linux ",
                           "biosdevname=0 ",
                           "net.ifnames=0 ",
                           "netdevice=eth0 ",
                           "netsetup=dhcp ",
                           "lang=en_US ",
                           "textmode=1 ",
                           "autoyast=http://{{ .HTTPIP }}:{{ .HTTPPort }}/autoinst-net.xml<wait> ",
                           "<enter><wait>"
                          ] 
#  floppy_files         = ["${path.root}/preseed.cfg"]
  iso_urls             = ["https://download.opensuse.org/distribution/leap/15.1/iso/openSUSE-Leap-15.1-NET-x86_64.iso"]
  iso_checksum         = "609d0ad527ab13681b44e28326cd7941e87adfe8d522e2b31d0d7c71e9d92992"

  
  ############ User Config ############
  ssh_username           = "${var.ssh_username}"
  ssh_password           = "${var.ssh_password}"
  ssh_pty                = true
  ssh_timeout            = "20m"
  ssh_handshake_attempts = "200"

  ############ vSphere Config ############
  vcenter_server = "${var.vcenter_server}"
  datacenter     = "${var.datacenter}"
  cluster        = "${var.cluster}"
  datastore      = "${var.datastore}"
  folder         = "${var.folder}"
  vm_name        = "opensuse-15-1-vsp-pkr-{{ timestamp }}"
  username       = "${var.vcenter_username}"
  password       = "${var.vcenter_password}"

}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.vsphere-iso.opensuse-15-1"]

  provisioner "shell" {
    inline = ["ls /",
              "echo '## sleeping for 2 minutes to let yast finish'",
              "sleep 60",
              "echo '## Echo UseDNS'",
              "echo 'UseDNS no' >> /etc/ssh/sshd_config;echo $?",
              "echo '## update dhclient.conf file to update hostname'",
              "sed -i '/^request.*/i send\\ host-name\\ =\\ gethostname();' /etc/dhclient.conf;echo $?",
              "echo '## disable cloud init service'",
              "zypper install -y git wget curl vim cloud-init",
              "systemctl disable cloud-config cloud-final cloud-init-local cloud-init;echo $?",
              "echo '## edit cloudinit.service'",
              "sed -i 's/^Before=wicked.service/After=wicked.service\\\nRequires=wicked.service/g' /usr/lib/systemd/system/cloud-init.service;echo $?",
              "sed -i 's/^WantedBy=cloud-init.target/WantedBy=multi-user.target/g' /usr/lib/systemd/system/cloud-init.service;echo $?",
              "sed -i 's/^WantedBy=cloud-init.target/WantedBy=multi-user.target/g' /usr/lib/systemd/system/cloud-final.service;echo $?",
              "sed -i 's/^WantedBy=cloud-init.target/WantedBy=multi-user.target/g' /usr/lib/systemd/system/cloud-config.service;echo $?",
              "sed -i 's/^WantedBy=cloud-init.target/WantedBy=multi-user.target/g' /usr/lib/systemd/system/cloud-init-local.service;echo $?",
              "echo '## Allow Root Login'",
              "sed -i 's/^disable_root: true/disable_root: false/' /etc/cloud/cloud.cfg;echo $?",
              "echo '## enable cloud init service'",
              "systemctl enable cloud-config cloud-final cloud-init-local cloud-init;echo $?",
              "echo '## change targetpw in sudoers'",
              "sed -i 's/^Defaults targetpw/#Defaults targetpw/' /etc/sudoers;echo $?",
              "echo '## change ALL in sudoers'",
              "sed -i 's/^ALL   ALL=(ALL) ALL/#ALL   ALL=(ALL) ALL/' /etc/sudoers;echo $?",
              "echo '## change cloud-user in sudoers'",
              "echo 'cloud-user   ALL=(ALL) ALL' > /etc/sudoers.d/cloud-user;echo $?",
              "echo '## cloud init clean'",
              "cloud-init clean;echo $?"
             ]
  }
}
